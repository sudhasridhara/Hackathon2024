syntax = "proto3";

package hackathonaccountrecovery.hackathonaccountrecovery;

import "amino/amino.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "hackathonaccountrecovery/hackathonaccountrecovery/params.proto";

option go_package = "hackathonaccountrecovery/x/hackathonaccountrecovery/types";

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;
  
  // UpdateParams defines a (governance) operation for updating the module
  // parameters. The authority defaults to the x/gov module account.
  rpc UpdateParams            (MsgUpdateParams           ) returns (MsgUpdateParamsResponse           );
  rpc AddAccountInfo          (MsgAddAccountInfo         ) returns (MsgAddAccountInfoResponse         );
  rpc Updatetotalshares       (MsgUpdatetotalshares      ) returns (MsgUpdatetotalsharesResponse      );
  rpc InitiateDeathValidation (MsgInitiateDeathValidation) returns (MsgInitiateDeathValidationResponse);
  rpc ValidateDeath           (MsgValidateDeath          ) returns (MsgValidateDeathResponse          );
  rpc CreateMultisite         (MsgCreateMultisite        ) returns (MsgCreateMultisiteResponse        );
  rpc UpdateMultisite         (MsgUpdateMultisite        ) returns (MsgUpdateMultisiteResponse        );
  rpc UpdateEmailId           (MsgUpdateEmailId          ) returns (MsgUpdateEmailIdResponse          );
}
// MsgUpdateParams is the Msg/UpdateParams request type.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) =                                                           "authority";
  option           (amino.name) = "hackathonaccountrecovery/x/hackathonaccountrecovery/MsgUpdateParams";
  
  // authority is the address that controls the module (defaults to x/gov unless overwritten).
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // params defines the module parameters to update.
  
  // NOTE: All parameters must be supplied.
  Params params = 2 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
message MsgUpdateParamsResponse {}

message MsgAddAccountInfo {
  option (cosmos.msg.v1.signer) = "creator";
  string creator     = 1;
  string owner       = 2;
  uint64 totalshares = 3;
  uint64 minshares   = 4;
  string emailId     = 5;
}

message MsgAddAccountInfoResponse {
  uint64 id = 1;
}

message MsgUpdatetotalshares {
  option (cosmos.msg.v1.signer) = "creator";
  string creator     = 1;
  string owner       = 2;
  uint64 totalshares = 3;
  uint64 minshares   = 4;
  uint64 id          = 5;
}

message MsgUpdatetotalsharesResponse {
  uint64 id = 1;
}

message MsgInitiateDeathValidation {
  option (cosmos.msg.v1.signer) = "creator";
  string creator   = 1;
  string owner     = 2;
  string deathDate = 3;
  uint64 id        = 4;
}

message MsgInitiateDeathValidationResponse {
  uint64 id = 1;
}

message MsgValidateDeath {
  option (cosmos.msg.v1.signer) = "creator";
  string creator     = 1;
  string owner       = 2;
  bool   isvalidated = 3;
  uint64 id          = 4;
}

message MsgValidateDeathResponse {
  uint64 id = 1;
}

message MsgCreateMultisite {
  option (cosmos.msg.v1.signer) = "creator";
  string creator   = 1;
  string account   = 2;
  uint64 id        = 3;
  string multisign = 4;
}

message MsgCreateMultisiteResponse {}

message MsgUpdateMultisite {
  option (cosmos.msg.v1.signer) = "creator";
  string creator           = 1;
  string account           = 2;
  uint64 id                = 3;
  string multisignAddress  = 4;
  string multisignShareKey = 5;
}

message MsgUpdateMultisiteResponse {}

message MsgUpdateEmailId {
  option (cosmos.msg.v1.signer) = "creator";
  string creator = 1;
  string account = 2;
  string emailid = 3;
}

message MsgUpdateEmailIdResponse {}

