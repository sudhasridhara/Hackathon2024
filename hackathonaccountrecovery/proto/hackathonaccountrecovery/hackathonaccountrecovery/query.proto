syntax = "proto3";

package hackathonaccountrecovery.hackathonaccountrecovery;

import "amino/amino.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "hackathonaccountrecovery/hackathonaccountrecovery/params.proto";
import "hackathonaccountrecovery/hackathonaccountrecovery/account.proto";
import "hackathonaccountrecovery/hackathonaccountrecovery/secret_key.proto";

option go_package = "hackathonaccountrecovery/x/hackathonaccountrecovery/types";

// Query defines the gRPC querier service.
service Query {
  
  // Parameters queries the parameters of the module.
  rpc Params (QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/hackathonaccountrecovery/hackathonaccountrecovery/params";
  
  }
  
  // Queries a list of ShowAccount items.
  rpc ShowAccount (QueryShowAccountRequest) returns (QueryShowAccountResponse) {
    option (google.api.http).get = "/hackathonaccountrecovery/hackathonaccountrecovery/show_account/{owner}";
  
  }
  
  // Queries a list of ListAccount items.
  rpc ListAccount (QueryListAccountRequest) returns (QueryListAccountResponse) {
    option (google.api.http).get = "/hackathonaccountrecovery/hackathonaccountrecovery/list_account";
  
  }
  
  // Queries a list of GetShareKeys items.
  rpc GetShareKeys (QueryGetShareKeysRequest) returns (QueryGetShareKeysResponse) {
    option (google.api.http).get = "/hackathonaccountrecovery/hackathonaccountrecovery/get_share_keys/{key}/{totalshares}/{minshares}";
  
  }
  
  // Queries a list of GetSecretKey items.
  rpc GetSecretKey (QueryGetSecretKeyRequest) returns (QueryGetSecretKeyResponse) {
    option (google.api.http).get = "/hackathonaccountrecovery/hackathonaccountrecovery/get_secret_key/{accountOwner}";
  
  }
  
  // Queries a list of GetMappedAccounts items.
  rpc GetMappedAccounts (QueryGetMappedAccountsRequest) returns (QueryGetMappedAccountsResponse) {
    option (google.api.http).get = "/hackathonaccountrecovery/hackathonaccountrecovery/get_mapped_accounts/{account}";
  
  }
}
// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
}

message QueryShowAccountRequest {
  string owner = 1;
}

message QueryShowAccountResponse {
  Account account = 1;
}

message QueryListAccountRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryListAccountResponse {
  repeated Account                                account    = 1 [(gogoproto.nullable) = false];
           cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetShareKeysRequest {
  string                                key         = 1;
  int64                                 totalshares = 2;
  int64                                 minshares   = 3;
  cosmos.base.query.v1beta1.PageRequest pagination  = 4;
}

message QueryGetShareKeysResponse {
  repeated string secretkey = 1 [(gogoproto.nullable) = false];
}

message QueryGetSecretKeyRequest {
  string accountOwner = 1;
}

message QueryGetSecretKeyResponse {
  string secretKey = 1;
}

message QueryGetMappedAccountsRequest {
  string                                account    = 1;
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

message QueryGetMappedAccountsResponse {
  repeated Account                                account    = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

