// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package hackathonaccountrecovery

import (
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var (
	md_RecoveryAddresses          protoreflect.MessageDescriptor
	fd_RecoveryAddresses_address  protoreflect.FieldDescriptor
	fd_RecoveryAddresses_sharekey protoreflect.FieldDescriptor
)

func init() {
	file_hackathonaccountrecovery_hackathonaccountrecovery_account_proto_init()
	md_RecoveryAddresses = File_hackathonaccountrecovery_hackathonaccountrecovery_account_proto.Messages().ByName("RecoveryAddresses")
	fd_RecoveryAddresses_address = md_RecoveryAddresses.Fields().ByName("address")
	fd_RecoveryAddresses_sharekey = md_RecoveryAddresses.Fields().ByName("sharekey")
}

var _ protoreflect.Message = (*fastReflection_RecoveryAddresses)(nil)

type fastReflection_RecoveryAddresses RecoveryAddresses

func (x *RecoveryAddresses) ProtoReflect() protoreflect.Message {
	return (*fastReflection_RecoveryAddresses)(x)
}

func (x *RecoveryAddresses) slowProtoReflect() protoreflect.Message {
	mi := &file_hackathonaccountrecovery_hackathonaccountrecovery_account_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_RecoveryAddresses_messageType fastReflection_RecoveryAddresses_messageType
var _ protoreflect.MessageType = fastReflection_RecoveryAddresses_messageType{}

type fastReflection_RecoveryAddresses_messageType struct{}

func (x fastReflection_RecoveryAddresses_messageType) Zero() protoreflect.Message {
	return (*fastReflection_RecoveryAddresses)(nil)
}
func (x fastReflection_RecoveryAddresses_messageType) New() protoreflect.Message {
	return new(fastReflection_RecoveryAddresses)
}
func (x fastReflection_RecoveryAddresses_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_RecoveryAddresses
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_RecoveryAddresses) Descriptor() protoreflect.MessageDescriptor {
	return md_RecoveryAddresses
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_RecoveryAddresses) Type() protoreflect.MessageType {
	return _fastReflection_RecoveryAddresses_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_RecoveryAddresses) New() protoreflect.Message {
	return new(fastReflection_RecoveryAddresses)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_RecoveryAddresses) Interface() protoreflect.ProtoMessage {
	return (*RecoveryAddresses)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_RecoveryAddresses) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Address != "" {
		value := protoreflect.ValueOfString(x.Address)
		if !f(fd_RecoveryAddresses_address, value) {
			return
		}
	}
	if x.Sharekey != "" {
		value := protoreflect.ValueOfString(x.Sharekey)
		if !f(fd_RecoveryAddresses_sharekey, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_RecoveryAddresses) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "hackathonaccountrecovery.hackathonaccountrecovery.RecoveryAddresses.address":
		return x.Address != ""
	case "hackathonaccountrecovery.hackathonaccountrecovery.RecoveryAddresses.sharekey":
		return x.Sharekey != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: hackathonaccountrecovery.hackathonaccountrecovery.RecoveryAddresses"))
		}
		panic(fmt.Errorf("message hackathonaccountrecovery.hackathonaccountrecovery.RecoveryAddresses does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_RecoveryAddresses) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "hackathonaccountrecovery.hackathonaccountrecovery.RecoveryAddresses.address":
		x.Address = ""
	case "hackathonaccountrecovery.hackathonaccountrecovery.RecoveryAddresses.sharekey":
		x.Sharekey = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: hackathonaccountrecovery.hackathonaccountrecovery.RecoveryAddresses"))
		}
		panic(fmt.Errorf("message hackathonaccountrecovery.hackathonaccountrecovery.RecoveryAddresses does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_RecoveryAddresses) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "hackathonaccountrecovery.hackathonaccountrecovery.RecoveryAddresses.address":
		value := x.Address
		return protoreflect.ValueOfString(value)
	case "hackathonaccountrecovery.hackathonaccountrecovery.RecoveryAddresses.sharekey":
		value := x.Sharekey
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: hackathonaccountrecovery.hackathonaccountrecovery.RecoveryAddresses"))
		}
		panic(fmt.Errorf("message hackathonaccountrecovery.hackathonaccountrecovery.RecoveryAddresses does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_RecoveryAddresses) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "hackathonaccountrecovery.hackathonaccountrecovery.RecoveryAddresses.address":
		x.Address = value.Interface().(string)
	case "hackathonaccountrecovery.hackathonaccountrecovery.RecoveryAddresses.sharekey":
		x.Sharekey = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: hackathonaccountrecovery.hackathonaccountrecovery.RecoveryAddresses"))
		}
		panic(fmt.Errorf("message hackathonaccountrecovery.hackathonaccountrecovery.RecoveryAddresses does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_RecoveryAddresses) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "hackathonaccountrecovery.hackathonaccountrecovery.RecoveryAddresses.address":
		panic(fmt.Errorf("field address of message hackathonaccountrecovery.hackathonaccountrecovery.RecoveryAddresses is not mutable"))
	case "hackathonaccountrecovery.hackathonaccountrecovery.RecoveryAddresses.sharekey":
		panic(fmt.Errorf("field sharekey of message hackathonaccountrecovery.hackathonaccountrecovery.RecoveryAddresses is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: hackathonaccountrecovery.hackathonaccountrecovery.RecoveryAddresses"))
		}
		panic(fmt.Errorf("message hackathonaccountrecovery.hackathonaccountrecovery.RecoveryAddresses does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_RecoveryAddresses) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "hackathonaccountrecovery.hackathonaccountrecovery.RecoveryAddresses.address":
		return protoreflect.ValueOfString("")
	case "hackathonaccountrecovery.hackathonaccountrecovery.RecoveryAddresses.sharekey":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: hackathonaccountrecovery.hackathonaccountrecovery.RecoveryAddresses"))
		}
		panic(fmt.Errorf("message hackathonaccountrecovery.hackathonaccountrecovery.RecoveryAddresses does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_RecoveryAddresses) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in hackathonaccountrecovery.hackathonaccountrecovery.RecoveryAddresses", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_RecoveryAddresses) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_RecoveryAddresses) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_RecoveryAddresses) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_RecoveryAddresses) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*RecoveryAddresses)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Address)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Sharekey)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*RecoveryAddresses)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.Sharekey) > 0 {
			i -= len(x.Sharekey)
			copy(dAtA[i:], x.Sharekey)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Sharekey)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Address) > 0 {
			i -= len(x.Address)
			copy(dAtA[i:], x.Address)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Address)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*RecoveryAddresses)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: RecoveryAddresses: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: RecoveryAddresses: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Address = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Sharekey", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Sharekey = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_Account_10_list)(nil)

type _Account_10_list struct {
	list *[]*RecoveryAddresses
}

func (x *_Account_10_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_Account_10_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_Account_10_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*RecoveryAddresses)
	(*x.list)[i] = concreteValue
}

func (x *_Account_10_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*RecoveryAddresses)
	*x.list = append(*x.list, concreteValue)
}

func (x *_Account_10_list) AppendMutable() protoreflect.Value {
	v := new(RecoveryAddresses)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_Account_10_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_Account_10_list) NewElement() protoreflect.Value {
	v := new(RecoveryAddresses)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_Account_10_list) IsValid() bool {
	return x.list != nil
}

var (
	md_Account                  protoreflect.MessageDescriptor
	fd_Account_owner            protoreflect.FieldDescriptor
	fd_Account_totalshares      protoreflect.FieldDescriptor
	fd_Account_minshares        protoreflect.FieldDescriptor
	fd_Account_creator          protoreflect.FieldDescriptor
	fd_Account_createddate      protoreflect.FieldDescriptor
	fd_Account_lastmodifieddate protoreflect.FieldDescriptor
	fd_Account_deathDate        protoreflect.FieldDescriptor
	fd_Account_validated        protoreflect.FieldDescriptor
	fd_Account_id               protoreflect.FieldDescriptor
	fd_Account_activated        protoreflect.FieldDescriptor
	fd_Account_emailId          protoreflect.FieldDescriptor
	fd_Account_sentKey          protoreflect.FieldDescriptor
	fd_Account_MultiSign        protoreflect.FieldDescriptor
)

func init() {
	file_hackathonaccountrecovery_hackathonaccountrecovery_account_proto_init()
	md_Account = File_hackathonaccountrecovery_hackathonaccountrecovery_account_proto.Messages().ByName("Account")
	fd_Account_owner = md_Account.Fields().ByName("owner")
	fd_Account_totalshares = md_Account.Fields().ByName("totalshares")
	fd_Account_minshares = md_Account.Fields().ByName("minshares")
	fd_Account_creator = md_Account.Fields().ByName("creator")
	fd_Account_createddate = md_Account.Fields().ByName("createddate")
	fd_Account_lastmodifieddate = md_Account.Fields().ByName("lastmodifieddate")
	fd_Account_deathDate = md_Account.Fields().ByName("deathDate")
	fd_Account_validated = md_Account.Fields().ByName("validated")
	fd_Account_id = md_Account.Fields().ByName("id")
	fd_Account_activated = md_Account.Fields().ByName("activated")
	fd_Account_emailId = md_Account.Fields().ByName("emailId")
	fd_Account_sentKey = md_Account.Fields().ByName("sentKey")
	fd_Account_MultiSign = md_Account.Fields().ByName("MultiSign")
}

var _ protoreflect.Message = (*fastReflection_Account)(nil)

type fastReflection_Account Account

func (x *Account) ProtoReflect() protoreflect.Message {
	return (*fastReflection_Account)(x)
}

func (x *Account) slowProtoReflect() protoreflect.Message {
	mi := &file_hackathonaccountrecovery_hackathonaccountrecovery_account_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_Account_messageType fastReflection_Account_messageType
var _ protoreflect.MessageType = fastReflection_Account_messageType{}

type fastReflection_Account_messageType struct{}

func (x fastReflection_Account_messageType) Zero() protoreflect.Message {
	return (*fastReflection_Account)(nil)
}
func (x fastReflection_Account_messageType) New() protoreflect.Message {
	return new(fastReflection_Account)
}
func (x fastReflection_Account_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_Account
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_Account) Descriptor() protoreflect.MessageDescriptor {
	return md_Account
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_Account) Type() protoreflect.MessageType {
	return _fastReflection_Account_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_Account) New() protoreflect.Message {
	return new(fastReflection_Account)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_Account) Interface() protoreflect.ProtoMessage {
	return (*Account)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_Account) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Owner != "" {
		value := protoreflect.ValueOfString(x.Owner)
		if !f(fd_Account_owner, value) {
			return
		}
	}
	if x.Totalshares != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Totalshares)
		if !f(fd_Account_totalshares, value) {
			return
		}
	}
	if x.Minshares != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Minshares)
		if !f(fd_Account_minshares, value) {
			return
		}
	}
	if x.Creator != "" {
		value := protoreflect.ValueOfString(x.Creator)
		if !f(fd_Account_creator, value) {
			return
		}
	}
	if x.Createddate != "" {
		value := protoreflect.ValueOfString(x.Createddate)
		if !f(fd_Account_createddate, value) {
			return
		}
	}
	if x.Lastmodifieddate != "" {
		value := protoreflect.ValueOfString(x.Lastmodifieddate)
		if !f(fd_Account_lastmodifieddate, value) {
			return
		}
	}
	if x.DeathDate != "" {
		value := protoreflect.ValueOfString(x.DeathDate)
		if !f(fd_Account_deathDate, value) {
			return
		}
	}
	if x.Validated != false {
		value := protoreflect.ValueOfBool(x.Validated)
		if !f(fd_Account_validated, value) {
			return
		}
	}
	if x.Id != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Id)
		if !f(fd_Account_id, value) {
			return
		}
	}
	if x.Activated != false {
		value := protoreflect.ValueOfBool(x.Activated)
		if !f(fd_Account_activated, value) {
			return
		}
	}
	if x.EmailId != "" {
		value := protoreflect.ValueOfString(x.EmailId)
		if !f(fd_Account_emailId, value) {
			return
		}
	}
	if x.SentKey != false {
		value := protoreflect.ValueOfBool(x.SentKey)
		if !f(fd_Account_sentKey, value) {
			return
		}
	}
	if len(x.MultiSign) != 0 {
		value := protoreflect.ValueOfList(&_Account_10_list{list: &x.MultiSign})
		if !f(fd_Account_MultiSign, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_Account) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "hackathonaccountrecovery.hackathonaccountrecovery.Account.owner":
		return x.Owner != ""
	case "hackathonaccountrecovery.hackathonaccountrecovery.Account.totalshares":
		return x.Totalshares != uint64(0)
	case "hackathonaccountrecovery.hackathonaccountrecovery.Account.minshares":
		return x.Minshares != uint64(0)
	case "hackathonaccountrecovery.hackathonaccountrecovery.Account.creator":
		return x.Creator != ""
	case "hackathonaccountrecovery.hackathonaccountrecovery.Account.createddate":
		return x.Createddate != ""
	case "hackathonaccountrecovery.hackathonaccountrecovery.Account.lastmodifieddate":
		return x.Lastmodifieddate != ""
	case "hackathonaccountrecovery.hackathonaccountrecovery.Account.deathDate":
		return x.DeathDate != ""
	case "hackathonaccountrecovery.hackathonaccountrecovery.Account.validated":
		return x.Validated != false
	case "hackathonaccountrecovery.hackathonaccountrecovery.Account.id":
		return x.Id != uint64(0)
	case "hackathonaccountrecovery.hackathonaccountrecovery.Account.activated":
		return x.Activated != false
	case "hackathonaccountrecovery.hackathonaccountrecovery.Account.emailId":
		return x.EmailId != ""
	case "hackathonaccountrecovery.hackathonaccountrecovery.Account.sentKey":
		return x.SentKey != false
	case "hackathonaccountrecovery.hackathonaccountrecovery.Account.MultiSign":
		return len(x.MultiSign) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: hackathonaccountrecovery.hackathonaccountrecovery.Account"))
		}
		panic(fmt.Errorf("message hackathonaccountrecovery.hackathonaccountrecovery.Account does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Account) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "hackathonaccountrecovery.hackathonaccountrecovery.Account.owner":
		x.Owner = ""
	case "hackathonaccountrecovery.hackathonaccountrecovery.Account.totalshares":
		x.Totalshares = uint64(0)
	case "hackathonaccountrecovery.hackathonaccountrecovery.Account.minshares":
		x.Minshares = uint64(0)
	case "hackathonaccountrecovery.hackathonaccountrecovery.Account.creator":
		x.Creator = ""
	case "hackathonaccountrecovery.hackathonaccountrecovery.Account.createddate":
		x.Createddate = ""
	case "hackathonaccountrecovery.hackathonaccountrecovery.Account.lastmodifieddate":
		x.Lastmodifieddate = ""
	case "hackathonaccountrecovery.hackathonaccountrecovery.Account.deathDate":
		x.DeathDate = ""
	case "hackathonaccountrecovery.hackathonaccountrecovery.Account.validated":
		x.Validated = false
	case "hackathonaccountrecovery.hackathonaccountrecovery.Account.id":
		x.Id = uint64(0)
	case "hackathonaccountrecovery.hackathonaccountrecovery.Account.activated":
		x.Activated = false
	case "hackathonaccountrecovery.hackathonaccountrecovery.Account.emailId":
		x.EmailId = ""
	case "hackathonaccountrecovery.hackathonaccountrecovery.Account.sentKey":
		x.SentKey = false
	case "hackathonaccountrecovery.hackathonaccountrecovery.Account.MultiSign":
		x.MultiSign = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: hackathonaccountrecovery.hackathonaccountrecovery.Account"))
		}
		panic(fmt.Errorf("message hackathonaccountrecovery.hackathonaccountrecovery.Account does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_Account) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "hackathonaccountrecovery.hackathonaccountrecovery.Account.owner":
		value := x.Owner
		return protoreflect.ValueOfString(value)
	case "hackathonaccountrecovery.hackathonaccountrecovery.Account.totalshares":
		value := x.Totalshares
		return protoreflect.ValueOfUint64(value)
	case "hackathonaccountrecovery.hackathonaccountrecovery.Account.minshares":
		value := x.Minshares
		return protoreflect.ValueOfUint64(value)
	case "hackathonaccountrecovery.hackathonaccountrecovery.Account.creator":
		value := x.Creator
		return protoreflect.ValueOfString(value)
	case "hackathonaccountrecovery.hackathonaccountrecovery.Account.createddate":
		value := x.Createddate
		return protoreflect.ValueOfString(value)
	case "hackathonaccountrecovery.hackathonaccountrecovery.Account.lastmodifieddate":
		value := x.Lastmodifieddate
		return protoreflect.ValueOfString(value)
	case "hackathonaccountrecovery.hackathonaccountrecovery.Account.deathDate":
		value := x.DeathDate
		return protoreflect.ValueOfString(value)
	case "hackathonaccountrecovery.hackathonaccountrecovery.Account.validated":
		value := x.Validated
		return protoreflect.ValueOfBool(value)
	case "hackathonaccountrecovery.hackathonaccountrecovery.Account.id":
		value := x.Id
		return protoreflect.ValueOfUint64(value)
	case "hackathonaccountrecovery.hackathonaccountrecovery.Account.activated":
		value := x.Activated
		return protoreflect.ValueOfBool(value)
	case "hackathonaccountrecovery.hackathonaccountrecovery.Account.emailId":
		value := x.EmailId
		return protoreflect.ValueOfString(value)
	case "hackathonaccountrecovery.hackathonaccountrecovery.Account.sentKey":
		value := x.SentKey
		return protoreflect.ValueOfBool(value)
	case "hackathonaccountrecovery.hackathonaccountrecovery.Account.MultiSign":
		if len(x.MultiSign) == 0 {
			return protoreflect.ValueOfList(&_Account_10_list{})
		}
		listValue := &_Account_10_list{list: &x.MultiSign}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: hackathonaccountrecovery.hackathonaccountrecovery.Account"))
		}
		panic(fmt.Errorf("message hackathonaccountrecovery.hackathonaccountrecovery.Account does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Account) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "hackathonaccountrecovery.hackathonaccountrecovery.Account.owner":
		x.Owner = value.Interface().(string)
	case "hackathonaccountrecovery.hackathonaccountrecovery.Account.totalshares":
		x.Totalshares = value.Uint()
	case "hackathonaccountrecovery.hackathonaccountrecovery.Account.minshares":
		x.Minshares = value.Uint()
	case "hackathonaccountrecovery.hackathonaccountrecovery.Account.creator":
		x.Creator = value.Interface().(string)
	case "hackathonaccountrecovery.hackathonaccountrecovery.Account.createddate":
		x.Createddate = value.Interface().(string)
	case "hackathonaccountrecovery.hackathonaccountrecovery.Account.lastmodifieddate":
		x.Lastmodifieddate = value.Interface().(string)
	case "hackathonaccountrecovery.hackathonaccountrecovery.Account.deathDate":
		x.DeathDate = value.Interface().(string)
	case "hackathonaccountrecovery.hackathonaccountrecovery.Account.validated":
		x.Validated = value.Bool()
	case "hackathonaccountrecovery.hackathonaccountrecovery.Account.id":
		x.Id = value.Uint()
	case "hackathonaccountrecovery.hackathonaccountrecovery.Account.activated":
		x.Activated = value.Bool()
	case "hackathonaccountrecovery.hackathonaccountrecovery.Account.emailId":
		x.EmailId = value.Interface().(string)
	case "hackathonaccountrecovery.hackathonaccountrecovery.Account.sentKey":
		x.SentKey = value.Bool()
	case "hackathonaccountrecovery.hackathonaccountrecovery.Account.MultiSign":
		lv := value.List()
		clv := lv.(*_Account_10_list)
		x.MultiSign = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: hackathonaccountrecovery.hackathonaccountrecovery.Account"))
		}
		panic(fmt.Errorf("message hackathonaccountrecovery.hackathonaccountrecovery.Account does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Account) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "hackathonaccountrecovery.hackathonaccountrecovery.Account.MultiSign":
		if x.MultiSign == nil {
			x.MultiSign = []*RecoveryAddresses{}
		}
		value := &_Account_10_list{list: &x.MultiSign}
		return protoreflect.ValueOfList(value)
	case "hackathonaccountrecovery.hackathonaccountrecovery.Account.owner":
		panic(fmt.Errorf("field owner of message hackathonaccountrecovery.hackathonaccountrecovery.Account is not mutable"))
	case "hackathonaccountrecovery.hackathonaccountrecovery.Account.totalshares":
		panic(fmt.Errorf("field totalshares of message hackathonaccountrecovery.hackathonaccountrecovery.Account is not mutable"))
	case "hackathonaccountrecovery.hackathonaccountrecovery.Account.minshares":
		panic(fmt.Errorf("field minshares of message hackathonaccountrecovery.hackathonaccountrecovery.Account is not mutable"))
	case "hackathonaccountrecovery.hackathonaccountrecovery.Account.creator":
		panic(fmt.Errorf("field creator of message hackathonaccountrecovery.hackathonaccountrecovery.Account is not mutable"))
	case "hackathonaccountrecovery.hackathonaccountrecovery.Account.createddate":
		panic(fmt.Errorf("field createddate of message hackathonaccountrecovery.hackathonaccountrecovery.Account is not mutable"))
	case "hackathonaccountrecovery.hackathonaccountrecovery.Account.lastmodifieddate":
		panic(fmt.Errorf("field lastmodifieddate of message hackathonaccountrecovery.hackathonaccountrecovery.Account is not mutable"))
	case "hackathonaccountrecovery.hackathonaccountrecovery.Account.deathDate":
		panic(fmt.Errorf("field deathDate of message hackathonaccountrecovery.hackathonaccountrecovery.Account is not mutable"))
	case "hackathonaccountrecovery.hackathonaccountrecovery.Account.validated":
		panic(fmt.Errorf("field validated of message hackathonaccountrecovery.hackathonaccountrecovery.Account is not mutable"))
	case "hackathonaccountrecovery.hackathonaccountrecovery.Account.id":
		panic(fmt.Errorf("field id of message hackathonaccountrecovery.hackathonaccountrecovery.Account is not mutable"))
	case "hackathonaccountrecovery.hackathonaccountrecovery.Account.activated":
		panic(fmt.Errorf("field activated of message hackathonaccountrecovery.hackathonaccountrecovery.Account is not mutable"))
	case "hackathonaccountrecovery.hackathonaccountrecovery.Account.emailId":
		panic(fmt.Errorf("field emailId of message hackathonaccountrecovery.hackathonaccountrecovery.Account is not mutable"))
	case "hackathonaccountrecovery.hackathonaccountrecovery.Account.sentKey":
		panic(fmt.Errorf("field sentKey of message hackathonaccountrecovery.hackathonaccountrecovery.Account is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: hackathonaccountrecovery.hackathonaccountrecovery.Account"))
		}
		panic(fmt.Errorf("message hackathonaccountrecovery.hackathonaccountrecovery.Account does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_Account) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "hackathonaccountrecovery.hackathonaccountrecovery.Account.owner":
		return protoreflect.ValueOfString("")
	case "hackathonaccountrecovery.hackathonaccountrecovery.Account.totalshares":
		return protoreflect.ValueOfUint64(uint64(0))
	case "hackathonaccountrecovery.hackathonaccountrecovery.Account.minshares":
		return protoreflect.ValueOfUint64(uint64(0))
	case "hackathonaccountrecovery.hackathonaccountrecovery.Account.creator":
		return protoreflect.ValueOfString("")
	case "hackathonaccountrecovery.hackathonaccountrecovery.Account.createddate":
		return protoreflect.ValueOfString("")
	case "hackathonaccountrecovery.hackathonaccountrecovery.Account.lastmodifieddate":
		return protoreflect.ValueOfString("")
	case "hackathonaccountrecovery.hackathonaccountrecovery.Account.deathDate":
		return protoreflect.ValueOfString("")
	case "hackathonaccountrecovery.hackathonaccountrecovery.Account.validated":
		return protoreflect.ValueOfBool(false)
	case "hackathonaccountrecovery.hackathonaccountrecovery.Account.id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "hackathonaccountrecovery.hackathonaccountrecovery.Account.activated":
		return protoreflect.ValueOfBool(false)
	case "hackathonaccountrecovery.hackathonaccountrecovery.Account.emailId":
		return protoreflect.ValueOfString("")
	case "hackathonaccountrecovery.hackathonaccountrecovery.Account.sentKey":
		return protoreflect.ValueOfBool(false)
	case "hackathonaccountrecovery.hackathonaccountrecovery.Account.MultiSign":
		list := []*RecoveryAddresses{}
		return protoreflect.ValueOfList(&_Account_10_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: hackathonaccountrecovery.hackathonaccountrecovery.Account"))
		}
		panic(fmt.Errorf("message hackathonaccountrecovery.hackathonaccountrecovery.Account does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_Account) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in hackathonaccountrecovery.hackathonaccountrecovery.Account", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_Account) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Account) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_Account) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_Account) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*Account)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Owner)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Totalshares != 0 {
			n += 1 + runtime.Sov(uint64(x.Totalshares))
		}
		if x.Minshares != 0 {
			n += 1 + runtime.Sov(uint64(x.Minshares))
		}
		l = len(x.Creator)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Createddate)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Lastmodifieddate)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.DeathDate)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Validated {
			n += 2
		}
		if x.Id != 0 {
			n += 1 + runtime.Sov(uint64(x.Id))
		}
		if x.Activated {
			n += 2
		}
		l = len(x.EmailId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.SentKey {
			n += 2
		}
		if len(x.MultiSign) > 0 {
			for _, e := range x.MultiSign {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*Account)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.SentKey {
			i--
			if x.SentKey {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x68
		}
		if len(x.EmailId) > 0 {
			i -= len(x.EmailId)
			copy(dAtA[i:], x.EmailId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.EmailId)))
			i--
			dAtA[i] = 0x62
		}
		if x.Activated {
			i--
			if x.Activated {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x58
		}
		if len(x.MultiSign) > 0 {
			for iNdEx := len(x.MultiSign) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.MultiSign[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x52
			}
		}
		if x.Id != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Id))
			i--
			dAtA[i] = 0x48
		}
		if x.Validated {
			i--
			if x.Validated {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x40
		}
		if len(x.DeathDate) > 0 {
			i -= len(x.DeathDate)
			copy(dAtA[i:], x.DeathDate)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.DeathDate)))
			i--
			dAtA[i] = 0x3a
		}
		if len(x.Lastmodifieddate) > 0 {
			i -= len(x.Lastmodifieddate)
			copy(dAtA[i:], x.Lastmodifieddate)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Lastmodifieddate)))
			i--
			dAtA[i] = 0x32
		}
		if len(x.Createddate) > 0 {
			i -= len(x.Createddate)
			copy(dAtA[i:], x.Createddate)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Createddate)))
			i--
			dAtA[i] = 0x2a
		}
		if len(x.Creator) > 0 {
			i -= len(x.Creator)
			copy(dAtA[i:], x.Creator)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Creator)))
			i--
			dAtA[i] = 0x22
		}
		if x.Minshares != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Minshares))
			i--
			dAtA[i] = 0x18
		}
		if x.Totalshares != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Totalshares))
			i--
			dAtA[i] = 0x10
		}
		if len(x.Owner) > 0 {
			i -= len(x.Owner)
			copy(dAtA[i:], x.Owner)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Owner)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*Account)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Account: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Account: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Owner = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Totalshares", wireType)
				}
				x.Totalshares = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Totalshares |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Minshares", wireType)
				}
				x.Minshares = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Minshares |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Creator = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Createddate", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Createddate = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Lastmodifieddate", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Lastmodifieddate = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DeathDate", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.DeathDate = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 8:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Validated", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.Validated = bool(v != 0)
			case 9:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
				}
				x.Id = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Id |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 11:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Activated", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.Activated = bool(v != 0)
			case 12:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EmailId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.EmailId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 13:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SentKey", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.SentKey = bool(v != 0)
			case 10:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MultiSign", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.MultiSign = append(x.MultiSign, &RecoveryAddresses{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.MultiSign[len(x.MultiSign)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: hackathonaccountrecovery/hackathonaccountrecovery/account.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Define the key-value pair
type RecoveryAddresses struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address  string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Sharekey string `protobuf:"bytes,2,opt,name=sharekey,proto3" json:"sharekey,omitempty"`
}

func (x *RecoveryAddresses) Reset() {
	*x = RecoveryAddresses{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hackathonaccountrecovery_hackathonaccountrecovery_account_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecoveryAddresses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecoveryAddresses) ProtoMessage() {}

// Deprecated: Use RecoveryAddresses.ProtoReflect.Descriptor instead.
func (*RecoveryAddresses) Descriptor() ([]byte, []int) {
	return file_hackathonaccountrecovery_hackathonaccountrecovery_account_proto_rawDescGZIP(), []int{0}
}

func (x *RecoveryAddresses) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *RecoveryAddresses) GetSharekey() string {
	if x != nil {
		return x.Sharekey
	}
	return ""
}

type Account struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Owner            string               `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	Totalshares      uint64               `protobuf:"varint,2,opt,name=totalshares,proto3" json:"totalshares,omitempty"`
	Minshares        uint64               `protobuf:"varint,3,opt,name=minshares,proto3" json:"minshares,omitempty"`
	Creator          string               `protobuf:"bytes,4,opt,name=creator,proto3" json:"creator,omitempty"`
	Createddate      string               `protobuf:"bytes,5,opt,name=createddate,proto3" json:"createddate,omitempty"`
	Lastmodifieddate string               `protobuf:"bytes,6,opt,name=lastmodifieddate,proto3" json:"lastmodifieddate,omitempty"`
	DeathDate        string               `protobuf:"bytes,7,opt,name=deathDate,proto3" json:"deathDate,omitempty"`
	Validated        bool                 `protobuf:"varint,8,opt,name=validated,proto3" json:"validated,omitempty"`
	Id               uint64               `protobuf:"varint,9,opt,name=id,proto3" json:"id,omitempty"`
	Activated        bool                 `protobuf:"varint,11,opt,name=activated,proto3" json:"activated,omitempty"`
	EmailId          string               `protobuf:"bytes,12,opt,name=emailId,proto3" json:"emailId,omitempty"`
	SentKey          bool                 `protobuf:"varint,13,opt,name=sentKey,proto3" json:"sentKey,omitempty"`
	MultiSign        []*RecoveryAddresses `protobuf:"bytes,10,rep,name=MultiSign,proto3" json:"MultiSign,omitempty"` // Collecti
}

func (x *Account) Reset() {
	*x = Account{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hackathonaccountrecovery_hackathonaccountrecovery_account_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Account) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Account) ProtoMessage() {}

// Deprecated: Use Account.ProtoReflect.Descriptor instead.
func (*Account) Descriptor() ([]byte, []int) {
	return file_hackathonaccountrecovery_hackathonaccountrecovery_account_proto_rawDescGZIP(), []int{1}
}

func (x *Account) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *Account) GetTotalshares() uint64 {
	if x != nil {
		return x.Totalshares
	}
	return 0
}

func (x *Account) GetMinshares() uint64 {
	if x != nil {
		return x.Minshares
	}
	return 0
}

func (x *Account) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *Account) GetCreateddate() string {
	if x != nil {
		return x.Createddate
	}
	return ""
}

func (x *Account) GetLastmodifieddate() string {
	if x != nil {
		return x.Lastmodifieddate
	}
	return ""
}

func (x *Account) GetDeathDate() string {
	if x != nil {
		return x.DeathDate
	}
	return ""
}

func (x *Account) GetValidated() bool {
	if x != nil {
		return x.Validated
	}
	return false
}

func (x *Account) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Account) GetActivated() bool {
	if x != nil {
		return x.Activated
	}
	return false
}

func (x *Account) GetEmailId() string {
	if x != nil {
		return x.EmailId
	}
	return ""
}

func (x *Account) GetSentKey() bool {
	if x != nil {
		return x.SentKey
	}
	return false
}

func (x *Account) GetMultiSign() []*RecoveryAddresses {
	if x != nil {
		return x.MultiSign
	}
	return nil
}

var File_hackathonaccountrecovery_hackathonaccountrecovery_account_proto protoreflect.FileDescriptor

var file_hackathonaccountrecovery_hackathonaccountrecovery_account_proto_rawDesc = []byte{
	0x0a, 0x3f, 0x68, 0x61, 0x63, 0x6b, 0x61, 0x74, 0x68, 0x6f, 0x6e, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2f, 0x68, 0x61, 0x63, 0x6b, 0x61,
	0x74, 0x68, 0x6f, 0x6e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x65, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x31, 0x68, 0x61, 0x63, 0x6b, 0x61, 0x74, 0x68, 0x6f, 0x6e, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x68, 0x61, 0x63, 0x6b,
	0x61, 0x74, 0x68, 0x6f, 0x6e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x65, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x49, 0x0a, 0x11, 0x52, 0x65,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x6b, 0x65, 0x79, 0x22, 0xcf, 0x03, 0x0a, 0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x69, 0x6e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6d, 0x69,
	0x6e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6c,
	0x61, 0x73, 0x74, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x64, 0x65, 0x61, 0x74, 0x68, 0x44, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x61, 0x74, 0x68, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x68, 0x0a,
	0x09, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x69, 0x67, 0x6e, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x44, 0x2e, 0x68, 0x61, 0x63, 0x6b, 0x61, 0x74, 0x68, 0x6f, 0x6e, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x68, 0x61, 0x63, 0x6b,
	0x61, 0x74, 0x68, 0x6f, 0x6e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x65, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x09, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x53, 0x69, 0x67, 0x6e, 0x42, 0xfa, 0x02, 0x0a, 0x35, 0x63, 0x6f, 0x6d, 0x2e,
	0x68, 0x61, 0x63, 0x6b, 0x61, 0x74, 0x68, 0x6f, 0x6e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x68, 0x61, 0x63, 0x6b, 0x61, 0x74, 0x68,
	0x6f, 0x6e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x42, 0x0c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x01, 0x5a, 0x4e, 0x68, 0x61, 0x63, 0x6b, 0x61, 0x74, 0x68, 0x6f, 0x6e, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x68, 0x61, 0x63, 0x6b, 0x61, 0x74, 0x68, 0x6f, 0x6e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2f, 0x68, 0x61, 0x63, 0x6b, 0x61, 0x74, 0x68,
	0x6f, 0x6e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0xa2, 0x02, 0x03, 0x48, 0x48, 0x58, 0xaa, 0x02, 0x31, 0x48, 0x61, 0x63, 0x6b, 0x61, 0x74,
	0x68, 0x6f, 0x6e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x2e, 0x48, 0x61, 0x63, 0x6b, 0x61, 0x74, 0x68, 0x6f, 0x6e, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0xca, 0x02, 0x31, 0x48, 0x61,
	0x63, 0x6b, 0x61, 0x74, 0x68, 0x6f, 0x6e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x65,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5c, 0x48, 0x61, 0x63, 0x6b, 0x61, 0x74, 0x68, 0x6f, 0x6e,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0xe2,
	0x02, 0x3d, 0x48, 0x61, 0x63, 0x6b, 0x61, 0x74, 0x68, 0x6f, 0x6e, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5c, 0x48, 0x61, 0x63, 0x6b, 0x61,
	0x74, 0x68, 0x6f, 0x6e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x65, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea,
	0x02, 0x32, 0x48, 0x61, 0x63, 0x6b, 0x61, 0x74, 0x68, 0x6f, 0x6e, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x3a, 0x3a, 0x48, 0x61, 0x63, 0x6b,
	0x61, 0x74, 0x68, 0x6f, 0x6e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x65, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_hackathonaccountrecovery_hackathonaccountrecovery_account_proto_rawDescOnce sync.Once
	file_hackathonaccountrecovery_hackathonaccountrecovery_account_proto_rawDescData = file_hackathonaccountrecovery_hackathonaccountrecovery_account_proto_rawDesc
)

func file_hackathonaccountrecovery_hackathonaccountrecovery_account_proto_rawDescGZIP() []byte {
	file_hackathonaccountrecovery_hackathonaccountrecovery_account_proto_rawDescOnce.Do(func() {
		file_hackathonaccountrecovery_hackathonaccountrecovery_account_proto_rawDescData = protoimpl.X.CompressGZIP(file_hackathonaccountrecovery_hackathonaccountrecovery_account_proto_rawDescData)
	})
	return file_hackathonaccountrecovery_hackathonaccountrecovery_account_proto_rawDescData
}

var file_hackathonaccountrecovery_hackathonaccountrecovery_account_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_hackathonaccountrecovery_hackathonaccountrecovery_account_proto_goTypes = []interface{}{
	(*RecoveryAddresses)(nil), // 0: hackathonaccountrecovery.hackathonaccountrecovery.RecoveryAddresses
	(*Account)(nil),           // 1: hackathonaccountrecovery.hackathonaccountrecovery.Account
}
var file_hackathonaccountrecovery_hackathonaccountrecovery_account_proto_depIdxs = []int32{
	0, // 0: hackathonaccountrecovery.hackathonaccountrecovery.Account.MultiSign:type_name -> hackathonaccountrecovery.hackathonaccountrecovery.RecoveryAddresses
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_hackathonaccountrecovery_hackathonaccountrecovery_account_proto_init() }
func file_hackathonaccountrecovery_hackathonaccountrecovery_account_proto_init() {
	if File_hackathonaccountrecovery_hackathonaccountrecovery_account_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_hackathonaccountrecovery_hackathonaccountrecovery_account_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecoveryAddresses); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hackathonaccountrecovery_hackathonaccountrecovery_account_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Account); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_hackathonaccountrecovery_hackathonaccountrecovery_account_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_hackathonaccountrecovery_hackathonaccountrecovery_account_proto_goTypes,
		DependencyIndexes: file_hackathonaccountrecovery_hackathonaccountrecovery_account_proto_depIdxs,
		MessageInfos:      file_hackathonaccountrecovery_hackathonaccountrecovery_account_proto_msgTypes,
	}.Build()
	File_hackathonaccountrecovery_hackathonaccountrecovery_account_proto = out.File
	file_hackathonaccountrecovery_hackathonaccountrecovery_account_proto_rawDesc = nil
	file_hackathonaccountrecovery_hackathonaccountrecovery_account_proto_goTypes = nil
	file_hackathonaccountrecovery_hackathonaccountrecovery_account_proto_depIdxs = nil
}
