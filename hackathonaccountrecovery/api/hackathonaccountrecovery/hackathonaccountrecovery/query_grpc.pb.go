// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: hackathonaccountrecovery/hackathonaccountrecovery/query.proto

package hackathonaccountrecovery

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Query_Params_FullMethodName            = "/hackathonaccountrecovery.hackathonaccountrecovery.Query/Params"
	Query_ShowAccount_FullMethodName       = "/hackathonaccountrecovery.hackathonaccountrecovery.Query/ShowAccount"
	Query_ListAccount_FullMethodName       = "/hackathonaccountrecovery.hackathonaccountrecovery.Query/ListAccount"
	Query_GetShareKeys_FullMethodName      = "/hackathonaccountrecovery.hackathonaccountrecovery.Query/GetShareKeys"
	Query_GetSecretKey_FullMethodName      = "/hackathonaccountrecovery.hackathonaccountrecovery.Query/GetSecretKey"
	Query_GetMappedAccounts_FullMethodName = "/hackathonaccountrecovery.hackathonaccountrecovery.Query/GetMappedAccounts"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of ShowAccount items.
	ShowAccount(ctx context.Context, in *QueryShowAccountRequest, opts ...grpc.CallOption) (*QueryShowAccountResponse, error)
	// Queries a list of ListAccount items.
	ListAccount(ctx context.Context, in *QueryListAccountRequest, opts ...grpc.CallOption) (*QueryListAccountResponse, error)
	// Queries a list of GetShareKeys items.
	GetShareKeys(ctx context.Context, in *QueryGetShareKeysRequest, opts ...grpc.CallOption) (*QueryGetShareKeysResponse, error)
	// Queries a list of GetSecretKey items.
	GetSecretKey(ctx context.Context, in *QueryGetSecretKeyRequest, opts ...grpc.CallOption) (*QueryGetSecretKeyResponse, error)
	// Queries a list of GetMappedAccounts items.
	GetMappedAccounts(ctx context.Context, in *QueryGetMappedAccountsRequest, opts ...grpc.CallOption) (*QueryGetMappedAccountsResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, Query_Params_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ShowAccount(ctx context.Context, in *QueryShowAccountRequest, opts ...grpc.CallOption) (*QueryShowAccountResponse, error) {
	out := new(QueryShowAccountResponse)
	err := c.cc.Invoke(ctx, Query_ShowAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListAccount(ctx context.Context, in *QueryListAccountRequest, opts ...grpc.CallOption) (*QueryListAccountResponse, error) {
	out := new(QueryListAccountResponse)
	err := c.cc.Invoke(ctx, Query_ListAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetShareKeys(ctx context.Context, in *QueryGetShareKeysRequest, opts ...grpc.CallOption) (*QueryGetShareKeysResponse, error) {
	out := new(QueryGetShareKeysResponse)
	err := c.cc.Invoke(ctx, Query_GetShareKeys_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetSecretKey(ctx context.Context, in *QueryGetSecretKeyRequest, opts ...grpc.CallOption) (*QueryGetSecretKeyResponse, error) {
	out := new(QueryGetSecretKeyResponse)
	err := c.cc.Invoke(ctx, Query_GetSecretKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetMappedAccounts(ctx context.Context, in *QueryGetMappedAccountsRequest, opts ...grpc.CallOption) (*QueryGetMappedAccountsResponse, error) {
	out := new(QueryGetMappedAccountsResponse)
	err := c.cc.Invoke(ctx, Query_GetMappedAccounts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of ShowAccount items.
	ShowAccount(context.Context, *QueryShowAccountRequest) (*QueryShowAccountResponse, error)
	// Queries a list of ListAccount items.
	ListAccount(context.Context, *QueryListAccountRequest) (*QueryListAccountResponse, error)
	// Queries a list of GetShareKeys items.
	GetShareKeys(context.Context, *QueryGetShareKeysRequest) (*QueryGetShareKeysResponse, error)
	// Queries a list of GetSecretKey items.
	GetSecretKey(context.Context, *QueryGetSecretKeyRequest) (*QueryGetSecretKeyResponse, error)
	// Queries a list of GetMappedAccounts items.
	GetMappedAccounts(context.Context, *QueryGetMappedAccountsRequest) (*QueryGetMappedAccountsResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (UnimplementedQueryServer) ShowAccount(context.Context, *QueryShowAccountRequest) (*QueryShowAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowAccount not implemented")
}
func (UnimplementedQueryServer) ListAccount(context.Context, *QueryListAccountRequest) (*QueryListAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccount not implemented")
}
func (UnimplementedQueryServer) GetShareKeys(context.Context, *QueryGetShareKeysRequest) (*QueryGetShareKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShareKeys not implemented")
}
func (UnimplementedQueryServer) GetSecretKey(context.Context, *QueryGetSecretKeyRequest) (*QueryGetSecretKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSecretKey not implemented")
}
func (UnimplementedQueryServer) GetMappedAccounts(context.Context, *QueryGetMappedAccountsRequest) (*QueryGetMappedAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMappedAccounts not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Params_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ShowAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryShowAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ShowAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ShowAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ShowAccount(ctx, req.(*QueryShowAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryListAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ListAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListAccount(ctx, req.(*QueryListAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetShareKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetShareKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetShareKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetShareKeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetShareKeys(ctx, req.(*QueryGetShareKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetSecretKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetSecretKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetSecretKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetSecretKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetSecretKey(ctx, req.(*QueryGetSecretKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetMappedAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetMappedAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetMappedAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetMappedAccounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetMappedAccounts(ctx, req.(*QueryGetMappedAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hackathonaccountrecovery.hackathonaccountrecovery.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "ShowAccount",
			Handler:    _Query_ShowAccount_Handler,
		},
		{
			MethodName: "ListAccount",
			Handler:    _Query_ListAccount_Handler,
		},
		{
			MethodName: "GetShareKeys",
			Handler:    _Query_GetShareKeys_Handler,
		},
		{
			MethodName: "GetSecretKey",
			Handler:    _Query_GetSecretKey_Handler,
		},
		{
			MethodName: "GetMappedAccounts",
			Handler:    _Query_GetMappedAccounts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hackathonaccountrecovery/hackathonaccountrecovery/query.proto",
}
