// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: hackathonaccountrecovery/hackathonaccountrecovery/tx.proto

package hackathonaccountrecovery

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Msg_UpdateParams_FullMethodName            = "/hackathonaccountrecovery.hackathonaccountrecovery.Msg/UpdateParams"
	Msg_AddAccountInfo_FullMethodName          = "/hackathonaccountrecovery.hackathonaccountrecovery.Msg/AddAccountInfo"
	Msg_Updatetotalshares_FullMethodName       = "/hackathonaccountrecovery.hackathonaccountrecovery.Msg/Updatetotalshares"
	Msg_InitiateDeathValidation_FullMethodName = "/hackathonaccountrecovery.hackathonaccountrecovery.Msg/InitiateDeathValidation"
	Msg_ValidateDeath_FullMethodName           = "/hackathonaccountrecovery.hackathonaccountrecovery.Msg/ValidateDeath"
	Msg_CreateMultisite_FullMethodName         = "/hackathonaccountrecovery.hackathonaccountrecovery.Msg/CreateMultisite"
	Msg_UpdateMultisite_FullMethodName         = "/hackathonaccountrecovery.hackathonaccountrecovery.Msg/UpdateMultisite"
	Msg_UpdateEmailId_FullMethodName           = "/hackathonaccountrecovery.hackathonaccountrecovery.Msg/UpdateEmailId"
)

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgClient interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	AddAccountInfo(ctx context.Context, in *MsgAddAccountInfo, opts ...grpc.CallOption) (*MsgAddAccountInfoResponse, error)
	Updatetotalshares(ctx context.Context, in *MsgUpdatetotalshares, opts ...grpc.CallOption) (*MsgUpdatetotalsharesResponse, error)
	InitiateDeathValidation(ctx context.Context, in *MsgInitiateDeathValidation, opts ...grpc.CallOption) (*MsgInitiateDeathValidationResponse, error)
	ValidateDeath(ctx context.Context, in *MsgValidateDeath, opts ...grpc.CallOption) (*MsgValidateDeathResponse, error)
	CreateMultisite(ctx context.Context, in *MsgCreateMultisite, opts ...grpc.CallOption) (*MsgCreateMultisiteResponse, error)
	UpdateMultisite(ctx context.Context, in *MsgUpdateMultisite, opts ...grpc.CallOption) (*MsgUpdateMultisiteResponse, error)
	UpdateEmailId(ctx context.Context, in *MsgUpdateEmailId, opts ...grpc.CallOption) (*MsgUpdateEmailIdResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateParams_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddAccountInfo(ctx context.Context, in *MsgAddAccountInfo, opts ...grpc.CallOption) (*MsgAddAccountInfoResponse, error) {
	out := new(MsgAddAccountInfoResponse)
	err := c.cc.Invoke(ctx, Msg_AddAccountInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Updatetotalshares(ctx context.Context, in *MsgUpdatetotalshares, opts ...grpc.CallOption) (*MsgUpdatetotalsharesResponse, error) {
	out := new(MsgUpdatetotalsharesResponse)
	err := c.cc.Invoke(ctx, Msg_Updatetotalshares_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) InitiateDeathValidation(ctx context.Context, in *MsgInitiateDeathValidation, opts ...grpc.CallOption) (*MsgInitiateDeathValidationResponse, error) {
	out := new(MsgInitiateDeathValidationResponse)
	err := c.cc.Invoke(ctx, Msg_InitiateDeathValidation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ValidateDeath(ctx context.Context, in *MsgValidateDeath, opts ...grpc.CallOption) (*MsgValidateDeathResponse, error) {
	out := new(MsgValidateDeathResponse)
	err := c.cc.Invoke(ctx, Msg_ValidateDeath_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateMultisite(ctx context.Context, in *MsgCreateMultisite, opts ...grpc.CallOption) (*MsgCreateMultisiteResponse, error) {
	out := new(MsgCreateMultisiteResponse)
	err := c.cc.Invoke(ctx, Msg_CreateMultisite_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateMultisite(ctx context.Context, in *MsgUpdateMultisite, opts ...grpc.CallOption) (*MsgUpdateMultisiteResponse, error) {
	out := new(MsgUpdateMultisiteResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateMultisite_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateEmailId(ctx context.Context, in *MsgUpdateEmailId, opts ...grpc.CallOption) (*MsgUpdateEmailIdResponse, error) {
	out := new(MsgUpdateEmailIdResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateEmailId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations must embed UnimplementedMsgServer
// for forward compatibility
type MsgServer interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	AddAccountInfo(context.Context, *MsgAddAccountInfo) (*MsgAddAccountInfoResponse, error)
	Updatetotalshares(context.Context, *MsgUpdatetotalshares) (*MsgUpdatetotalsharesResponse, error)
	InitiateDeathValidation(context.Context, *MsgInitiateDeathValidation) (*MsgInitiateDeathValidationResponse, error)
	ValidateDeath(context.Context, *MsgValidateDeath) (*MsgValidateDeathResponse, error)
	CreateMultisite(context.Context, *MsgCreateMultisite) (*MsgCreateMultisiteResponse, error)
	UpdateMultisite(context.Context, *MsgUpdateMultisite) (*MsgUpdateMultisiteResponse, error)
	UpdateEmailId(context.Context, *MsgUpdateEmailId) (*MsgUpdateEmailIdResponse, error)
	mustEmbedUnimplementedMsgServer()
}

// UnimplementedMsgServer must be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (UnimplementedMsgServer) UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (UnimplementedMsgServer) AddAccountInfo(context.Context, *MsgAddAccountInfo) (*MsgAddAccountInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAccountInfo not implemented")
}
func (UnimplementedMsgServer) Updatetotalshares(context.Context, *MsgUpdatetotalshares) (*MsgUpdatetotalsharesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Updatetotalshares not implemented")
}
func (UnimplementedMsgServer) InitiateDeathValidation(context.Context, *MsgInitiateDeathValidation) (*MsgInitiateDeathValidationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitiateDeathValidation not implemented")
}
func (UnimplementedMsgServer) ValidateDeath(context.Context, *MsgValidateDeath) (*MsgValidateDeathResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateDeath not implemented")
}
func (UnimplementedMsgServer) CreateMultisite(context.Context, *MsgCreateMultisite) (*MsgCreateMultisiteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMultisite not implemented")
}
func (UnimplementedMsgServer) UpdateMultisite(context.Context, *MsgUpdateMultisite) (*MsgUpdateMultisiteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMultisite not implemented")
}
func (UnimplementedMsgServer) UpdateEmailId(context.Context, *MsgUpdateEmailId) (*MsgUpdateEmailIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEmailId not implemented")
}
func (UnimplementedMsgServer) mustEmbedUnimplementedMsgServer() {}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddAccountInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddAccountInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddAccountInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_AddAccountInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddAccountInfo(ctx, req.(*MsgAddAccountInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Updatetotalshares_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdatetotalshares)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Updatetotalshares(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_Updatetotalshares_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Updatetotalshares(ctx, req.(*MsgUpdatetotalshares))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_InitiateDeathValidation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgInitiateDeathValidation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).InitiateDeathValidation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_InitiateDeathValidation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).InitiateDeathValidation(ctx, req.(*MsgInitiateDeathValidation))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ValidateDeath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgValidateDeath)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ValidateDeath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_ValidateDeath_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ValidateDeath(ctx, req.(*MsgValidateDeath))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateMultisite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateMultisite)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateMultisite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CreateMultisite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateMultisite(ctx, req.(*MsgCreateMultisite))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateMultisite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateMultisite)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateMultisite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateMultisite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateMultisite(ctx, req.(*MsgUpdateMultisite))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateEmailId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateEmailId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateEmailId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateEmailId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateEmailId(ctx, req.(*MsgUpdateEmailId))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hackathonaccountrecovery.hackathonaccountrecovery.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "AddAccountInfo",
			Handler:    _Msg_AddAccountInfo_Handler,
		},
		{
			MethodName: "Updatetotalshares",
			Handler:    _Msg_Updatetotalshares_Handler,
		},
		{
			MethodName: "InitiateDeathValidation",
			Handler:    _Msg_InitiateDeathValidation_Handler,
		},
		{
			MethodName: "ValidateDeath",
			Handler:    _Msg_ValidateDeath_Handler,
		},
		{
			MethodName: "CreateMultisite",
			Handler:    _Msg_CreateMultisite_Handler,
		},
		{
			MethodName: "UpdateMultisite",
			Handler:    _Msg_UpdateMultisite_Handler,
		},
		{
			MethodName: "UpdateEmailId",
			Handler:    _Msg_UpdateEmailId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hackathonaccountrecovery/hackathonaccountrecovery/tx.proto",
}
