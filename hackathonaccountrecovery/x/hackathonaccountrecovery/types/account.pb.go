// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: hackathonaccountrecovery/hackathonaccountrecovery/account.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Define the key-value pair
type RecoveryAddresses struct {
	Address  string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Sharekey string `protobuf:"bytes,2,opt,name=sharekey,proto3" json:"sharekey,omitempty"`
}

func (m *RecoveryAddresses) Reset()         { *m = RecoveryAddresses{} }
func (m *RecoveryAddresses) String() string { return proto.CompactTextString(m) }
func (*RecoveryAddresses) ProtoMessage()    {}
func (*RecoveryAddresses) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dbda369f27efd6f, []int{0}
}
func (m *RecoveryAddresses) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecoveryAddresses) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecoveryAddresses.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecoveryAddresses) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecoveryAddresses.Merge(m, src)
}
func (m *RecoveryAddresses) XXX_Size() int {
	return m.Size()
}
func (m *RecoveryAddresses) XXX_DiscardUnknown() {
	xxx_messageInfo_RecoveryAddresses.DiscardUnknown(m)
}

var xxx_messageInfo_RecoveryAddresses proto.InternalMessageInfo

func (m *RecoveryAddresses) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *RecoveryAddresses) GetSharekey() string {
	if m != nil {
		return m.Sharekey
	}
	return ""
}

type Account struct {
	Owner            string              `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	Totalshares      uint64              `protobuf:"varint,2,opt,name=totalshares,proto3" json:"totalshares,omitempty"`
	Minshares        uint64              `protobuf:"varint,3,opt,name=minshares,proto3" json:"minshares,omitempty"`
	Creator          string              `protobuf:"bytes,4,opt,name=creator,proto3" json:"creator,omitempty"`
	Createddate      string              `protobuf:"bytes,5,opt,name=createddate,proto3" json:"createddate,omitempty"`
	Lastmodifieddate string              `protobuf:"bytes,6,opt,name=lastmodifieddate,proto3" json:"lastmodifieddate,omitempty"`
	DeathDate        string              `protobuf:"bytes,7,opt,name=deathDate,proto3" json:"deathDate,omitempty"`
	Validated        bool                `protobuf:"varint,8,opt,name=validated,proto3" json:"validated,omitempty"`
	Id               uint64              `protobuf:"varint,9,opt,name=id,proto3" json:"id,omitempty"`
	Activated        bool                `protobuf:"varint,11,opt,name=activated,proto3" json:"activated,omitempty"`
	EmailId          string              `protobuf:"bytes,12,opt,name=emailId,proto3" json:"emailId,omitempty"`
	SentKey          bool                `protobuf:"varint,13,opt,name=sentKey,proto3" json:"sentKey,omitempty"`
	MultiSign        []RecoveryAddresses `protobuf:"bytes,10,rep,name=MultiSign,proto3" json:"MultiSign"`
}

func (m *Account) Reset()         { *m = Account{} }
func (m *Account) String() string { return proto.CompactTextString(m) }
func (*Account) ProtoMessage()    {}
func (*Account) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dbda369f27efd6f, []int{1}
}
func (m *Account) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Account) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Account.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Account) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Account.Merge(m, src)
}
func (m *Account) XXX_Size() int {
	return m.Size()
}
func (m *Account) XXX_DiscardUnknown() {
	xxx_messageInfo_Account.DiscardUnknown(m)
}

var xxx_messageInfo_Account proto.InternalMessageInfo

func (m *Account) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *Account) GetTotalshares() uint64 {
	if m != nil {
		return m.Totalshares
	}
	return 0
}

func (m *Account) GetMinshares() uint64 {
	if m != nil {
		return m.Minshares
	}
	return 0
}

func (m *Account) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Account) GetCreateddate() string {
	if m != nil {
		return m.Createddate
	}
	return ""
}

func (m *Account) GetLastmodifieddate() string {
	if m != nil {
		return m.Lastmodifieddate
	}
	return ""
}

func (m *Account) GetDeathDate() string {
	if m != nil {
		return m.DeathDate
	}
	return ""
}

func (m *Account) GetValidated() bool {
	if m != nil {
		return m.Validated
	}
	return false
}

func (m *Account) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Account) GetActivated() bool {
	if m != nil {
		return m.Activated
	}
	return false
}

func (m *Account) GetEmailId() string {
	if m != nil {
		return m.EmailId
	}
	return ""
}

func (m *Account) GetSentKey() bool {
	if m != nil {
		return m.SentKey
	}
	return false
}

func (m *Account) GetMultiSign() []RecoveryAddresses {
	if m != nil {
		return m.MultiSign
	}
	return nil
}

func init() {
	proto.RegisterType((*RecoveryAddresses)(nil), "hackathonaccountrecovery.hackathonaccountrecovery.RecoveryAddresses")
	proto.RegisterType((*Account)(nil), "hackathonaccountrecovery.hackathonaccountrecovery.Account")
}

func init() {
	proto.RegisterFile("hackathonaccountrecovery/hackathonaccountrecovery/account.proto", fileDescriptor_4dbda369f27efd6f)
}

var fileDescriptor_4dbda369f27efd6f = []byte{
	// 388 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xbf, 0x6e, 0xea, 0x30,
	0x14, 0xc6, 0x13, 0xfe, 0xc7, 0xdc, 0x7b, 0x75, 0xaf, 0xc5, 0x60, 0xa1, 0xab, 0x34, 0x62, 0x42,
	0x1d, 0x82, 0xda, 0x4e, 0x9d, 0x2a, 0x10, 0x0b, 0xaa, 0xba, 0x84, 0xad, 0x9b, 0x1b, 0xbb, 0xc4,
	0x22, 0xc4, 0xc8, 0x36, 0xb4, 0x79, 0x8b, 0x3e, 0x16, 0x5b, 0x19, 0x3b, 0x55, 0x15, 0xbc, 0x48,
	0x65, 0x27, 0x10, 0x24, 0x94, 0xa1, 0x9b, 0xbf, 0xef, 0xfb, 0x9d, 0x93, 0x73, 0x94, 0x03, 0xee,
	0x22, 0x1c, 0xce, 0xb1, 0x8a, 0x78, 0x82, 0xc3, 0x90, 0xaf, 0x12, 0x25, 0x68, 0xc8, 0xd7, 0x54,
	0xa4, 0x83, 0xd2, 0x20, 0xd7, 0xfe, 0x52, 0x70, 0xc5, 0xe1, 0x55, 0x19, 0xe7, 0x97, 0x05, 0xdd,
	0xce, 0x8c, 0xcf, 0xb8, 0xa9, 0x1e, 0xe8, 0x57, 0xd6, 0xa8, 0x37, 0x01, 0xff, 0x82, 0x9c, 0x18,
	0x12, 0x22, 0xa8, 0x94, 0x54, 0x42, 0x04, 0x9a, 0x38, 0x13, 0xc8, 0xf6, 0xec, 0xbe, 0x13, 0x1c,
	0x24, 0xec, 0x82, 0x96, 0x8c, 0xb0, 0xa0, 0x73, 0x9a, 0xa2, 0x8a, 0x89, 0x8e, 0xba, 0xf7, 0x5e,
	0x05, 0xcd, 0x61, 0xf6, 0x51, 0xd8, 0x01, 0x75, 0xfe, 0x92, 0x50, 0x91, 0xd7, 0x67, 0x02, 0x7a,
	0xa0, 0xad, 0xb8, 0xc2, 0xb1, 0x29, 0x91, 0xa6, 0x41, 0x2d, 0x38, 0xb5, 0xe0, 0x7f, 0xe0, 0x2c,
	0x58, 0x92, 0xe7, 0x55, 0x93, 0x17, 0x86, 0x9e, 0x2b, 0x14, 0x14, 0x2b, 0x2e, 0x50, 0x2d, 0x9b,
	0x2b, 0x97, 0xba, 0xb3, 0x79, 0x52, 0x42, 0xb0, 0xa2, 0xa8, 0x6e, 0xd2, 0x53, 0x0b, 0x5e, 0x82,
	0xbf, 0x31, 0x96, 0x6a, 0xc1, 0x09, 0x7b, 0x66, 0x39, 0xd6, 0x30, 0xd8, 0x99, 0xaf, 0xa7, 0x20,
	0x14, 0xab, 0x68, 0xac, 0xa1, 0xa6, 0x81, 0x0a, 0x43, 0xa7, 0x6b, 0x1c, 0x33, 0x4d, 0x12, 0xd4,
	0xf2, 0xec, 0x7e, 0x2b, 0x28, 0x0c, 0xf8, 0x07, 0x54, 0x18, 0x41, 0x8e, 0x19, 0xbd, 0xc2, 0x88,
	0xa6, 0x71, 0xa8, 0xd8, 0xda, 0xd0, 0xed, 0x8c, 0x3e, 0x1a, 0x7a, 0x23, 0xba, 0xc0, 0x2c, 0x9e,
	0x10, 0xf4, 0x2b, 0xdb, 0x28, 0x97, 0x3a, 0x91, 0x34, 0x51, 0xf7, 0x34, 0x45, 0xbf, 0x4d, 0xd5,
	0x41, 0xc2, 0x08, 0x38, 0x0f, 0xab, 0x58, 0xb1, 0x29, 0x9b, 0x25, 0x08, 0x78, 0xd5, 0x7e, 0xfb,
	0x7a, 0xec, 0xff, 0xf8, 0x1e, 0xfc, 0xb3, 0xdf, 0x3e, 0xaa, 0x6d, 0x3e, 0x2f, 0xac, 0xa0, 0x68,
	0x3e, 0x9a, 0x6e, 0x76, 0xae, 0xbd, 0xdd, 0xb9, 0xf6, 0xd7, 0xce, 0xb5, 0xdf, 0xf6, 0xae, 0xb5,
	0xdd, 0xbb, 0xd6, 0xc7, 0xde, 0xb5, 0x1e, 0x6f, 0x4b, 0xef, 0xf4, 0xb5, 0xfc, 0x84, 0x55, 0xba,
	0xa4, 0xf2, 0xa9, 0x61, 0x0e, 0xef, 0xe6, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x03, 0xcf, 0x47, 0x7d,
	0x04, 0x03, 0x00, 0x00,
}

func (m *RecoveryAddresses) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecoveryAddresses) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecoveryAddresses) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sharekey) > 0 {
		i -= len(m.Sharekey)
		copy(dAtA[i:], m.Sharekey)
		i = encodeVarintAccount(dAtA, i, uint64(len(m.Sharekey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintAccount(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Account) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Account) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Account) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SentKey {
		i--
		if m.SentKey {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x68
	}
	if len(m.EmailId) > 0 {
		i -= len(m.EmailId)
		copy(dAtA[i:], m.EmailId)
		i = encodeVarintAccount(dAtA, i, uint64(len(m.EmailId)))
		i--
		dAtA[i] = 0x62
	}
	if m.Activated {
		i--
		if m.Activated {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if len(m.MultiSign) > 0 {
		for iNdEx := len(m.MultiSign) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MultiSign[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAccount(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if m.Id != 0 {
		i = encodeVarintAccount(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x48
	}
	if m.Validated {
		i--
		if m.Validated {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if len(m.DeathDate) > 0 {
		i -= len(m.DeathDate)
		copy(dAtA[i:], m.DeathDate)
		i = encodeVarintAccount(dAtA, i, uint64(len(m.DeathDate)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Lastmodifieddate) > 0 {
		i -= len(m.Lastmodifieddate)
		copy(dAtA[i:], m.Lastmodifieddate)
		i = encodeVarintAccount(dAtA, i, uint64(len(m.Lastmodifieddate)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Createddate) > 0 {
		i -= len(m.Createddate)
		copy(dAtA[i:], m.Createddate)
		i = encodeVarintAccount(dAtA, i, uint64(len(m.Createddate)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintAccount(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x22
	}
	if m.Minshares != 0 {
		i = encodeVarintAccount(dAtA, i, uint64(m.Minshares))
		i--
		dAtA[i] = 0x18
	}
	if m.Totalshares != 0 {
		i = encodeVarintAccount(dAtA, i, uint64(m.Totalshares))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintAccount(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintAccount(dAtA []byte, offset int, v uint64) int {
	offset -= sovAccount(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RecoveryAddresses) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovAccount(uint64(l))
	}
	l = len(m.Sharekey)
	if l > 0 {
		n += 1 + l + sovAccount(uint64(l))
	}
	return n
}

func (m *Account) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovAccount(uint64(l))
	}
	if m.Totalshares != 0 {
		n += 1 + sovAccount(uint64(m.Totalshares))
	}
	if m.Minshares != 0 {
		n += 1 + sovAccount(uint64(m.Minshares))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovAccount(uint64(l))
	}
	l = len(m.Createddate)
	if l > 0 {
		n += 1 + l + sovAccount(uint64(l))
	}
	l = len(m.Lastmodifieddate)
	if l > 0 {
		n += 1 + l + sovAccount(uint64(l))
	}
	l = len(m.DeathDate)
	if l > 0 {
		n += 1 + l + sovAccount(uint64(l))
	}
	if m.Validated {
		n += 2
	}
	if m.Id != 0 {
		n += 1 + sovAccount(uint64(m.Id))
	}
	if len(m.MultiSign) > 0 {
		for _, e := range m.MultiSign {
			l = e.Size()
			n += 1 + l + sovAccount(uint64(l))
		}
	}
	if m.Activated {
		n += 2
	}
	l = len(m.EmailId)
	if l > 0 {
		n += 1 + l + sovAccount(uint64(l))
	}
	if m.SentKey {
		n += 2
	}
	return n
}

func sovAccount(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAccount(x uint64) (n int) {
	return sovAccount(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RecoveryAddresses) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccount
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecoveryAddresses: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecoveryAddresses: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sharekey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sharekey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAccount(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAccount
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Account) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccount
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Account: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Account: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Totalshares", wireType)
			}
			m.Totalshares = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Totalshares |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Minshares", wireType)
			}
			m.Minshares = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Minshares |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Createddate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Createddate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lastmodifieddate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Lastmodifieddate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeathDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeathDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Validated = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MultiSign", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAccount
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MultiSign = append(m.MultiSign, RecoveryAddresses{})
			if err := m.MultiSign[len(m.MultiSign)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Activated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Activated = bool(v != 0)
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmailId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EmailId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SentKey", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SentKey = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipAccount(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAccount
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAccount(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAccount
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAccount
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAccount
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAccount
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAccount        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAccount          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAccount = fmt.Errorf("proto: unexpected end of group")
)
